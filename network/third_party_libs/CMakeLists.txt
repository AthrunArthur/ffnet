set(THIRD_PARTY_LIB_DIR ${PROJECT_SOURCE_DIR}/third_party_libs/)

function(download_lib libname url)
  if(NOT EXISTS ${THIRD_PARTY_LIB_DIR}/${libname}.zip)
    message(STATUS "require " ${libname} ", downloading...")
    file(DOWNLOAD ${url} ${THIRD_PARTY_LIB_DIR}/${libname}.zip)
    exec_program(unzip ${THIRD_PARTY_LIB_DIR} ARGS ${libname}.zip)
    if(EXISTS ${THIRD_PARTY_LIB_DIR}/${libname}-master/configure)
      exec_program(./configure ${THIRD_PARTY_LIB_DIR}/${libname}-master ARGS --prefix=${THIRD_PARTY_LIB_DIR}/build)
      exec_program(make ${THIRD_PARTY_LIB_DIR}/${libname}-master ARGS)
      exec_program(make ${THIRD_PARTY_LIB_DIR}/${libname}-master ARGS install)
    else()
      if(EXISTS ${THIRD_PARTY_LIB_DIR}/${libname}-master/CMakeLists.txt)
        exec_program(cmake ${THIRD_PARTY_LIB_DIR}/${libname}-master ARGS -DCMAKE_INSTALL_PREFIX=${THIRD_PARTY_LIB_DIR}/build)
        exec_program(make ${THIRD_PARTY_LIB_DIR}/${libname}-master)
        exec_program(make ${THIRD_PARTY_LIB_DIR}/${libname}-master ARGS install)
      else()
        message(WARNING "cannot build " ${libname})
      endif()
    endif()
  endif(NOT EXISTS ${THIRD_PARTY_LIB_DIR}/${libname}.zip)
endfunction(download_lib)


download_lib(glog https://github.com/google/glog/archive/master.zip)
download_lib(gflags https://github.com/gflags/gflags/archive/master.zip)

download_lib(asio https://github.com/chriskohlhoff/asio/archive/master.zip)
if(NOT EXISTS ${THIRD_PARTY_LIB_DIR}/build/asio.hpp)
  exec_program(cp ${THIRD_PARTY_LIB_DIR}/asio-master/asio/include ARGS -rf * ${THIRD_PARTY_LIB_DIR}/build/include/)
endif()
