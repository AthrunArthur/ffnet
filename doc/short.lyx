#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble


\newcommand{\ffnet}{\textsf{ffnet}}
\newcommand{\ffnetdir}[1]{\textit{/ffnet/root/dir${#1}$}}
\author{Athrun Arthur}
\title{A Quick Start for \ffnet{}}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package none
\inputencoding auto
\fontencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 0
\use_mathdots 0
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
maketitle{}
\end_layout

\end_inset


\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage{}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Why 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ffnet
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Network programming is a very complicated thing.
 Of course it's simple to write a simple ping-pong network application using
 socket.
 But you have to consider many other possible situations in productive applicati
ons.
 
\end_layout

\begin_layout Standard
Consider ping-pong as an example.
 There is a server which replys pong message when receives ping message,
 and a client which replys ping message when receives pong message.
 To make the infinite loop start, the client need to send the first ping
 message when the connection is established.
 Now let's see what you need to consider if ping-pong is a product which
 means avalibility, scalibility, strong and easy to extend.
\end_layout

\begin_layout Itemize
Connection management.
 It's obvious as there may be multiple clients.
 When a client is offline, the server need to know that.
\end_layout

\begin_layout Itemize
Avalibility.
 Network is complex partly because you may receive any possible messages,
 legal or illegal.
 You must distinguish those illegal messages from raw messages.
 This means you may need to handle some hostile attacks, like DDoS.
\end_layout

\begin_layout Itemize
Performance.
 It's a good practice to consider response time in network programming although
 ping-pong is simple.
 Maybe you know proactor pattern, reactor pattern, asynchronized I/O (like
 boost.asio), parallel programming.
 But you may turn a blind to these solutions because of complexity 
\end_layout

\begin_layout Itemize
Maintainable.
 Code refactoring is a normal thing in network programming.
 There are many situations recall code refactoring, for example, new business
 requirements, unexpected network behaviors, performance tunes and security
 ensurance.
 Again, you turn a blind to possible design patterns because of complexity.
\end_layout

\begin_layout Itemize
Configurable.
 Another burdern to adjust very network enviornments.
\end_layout

\begin_layout Standard
There are many network libraries which aim to bring simple and powerful
 network programming, like boost.asio, protocol buffer from Google, ACE and
 mudo.
 But 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ffnet{}
\end_layout

\end_inset

 is aim to provide higher level network programming enviornment with parallel,
 asynchronization, security , debugging and configurable features.
\end_layout

\begin_layout Subsection
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ffnet{}
\end_layout

\end_inset

 is ...
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ffnet{}
\end_layout

\end_inset

 is a opensource framework for network programming in C++.
 It's based on boost.asio and provide network management, package serialization
 and deserialization, asynchronization, security, debugging and configurable
 features.
 Now 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ffnet{}
\end_layout

\end_inset

 is still under heavy development.
\end_layout

\begin_layout Subsection
Build 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ffnet{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ffnet{}
\end_layout

\end_inset

 uses CMake to organize its source code and it depends on Boost (1.40 or
 higher).
 Suppose you have got the source code of 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ffnet{}
\end_layout

\end_inset

 and the directory is 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ffnetdir{/}
\end_layout

\end_inset

.
 Here are the steps you need to build it.
\end_layout

\begin_layout Enumerate
cd 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ffnetdir{/build}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
cmake ../
\end_layout

\begin_layout Enumerate
make
\end_layout

\begin_layout Standard
If you didn't install Boost into system path, you will get an error in the
 second step.
 In this case, you need to specify path of you Boost in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ffnetdir{/CMakeLists.txt}
\end_layout

\end_inset

, like this.
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
set(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} ``/home/athrun/boost_1_46_1'')
\end_layout

\begin_layout Plain Layout
set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} ``/home/athrun/boost_1_46_1/stage/l
ib'') 
\end_layout

\end_inset

You can find two generated file in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ffnetdir{/lib}
\end_layout

\end_inset

 now if you have built 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ffnet{}
\end_layout

\end_inset

 successfully.
 One is a static library and the other is a shared library.
\end_layout

\begin_layout Subsection
An example
\end_layout

\begin_layout Section
Use 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ffnet
\end_layout

\end_inset


\end_layout

\begin_layout Section
Inside 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ffnet
\end_layout

\end_inset


\end_layout

\begin_layout Section
Furthur Help
\end_layout

\end_body
\end_document
